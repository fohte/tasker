name: CI

on:
  push:

jobs:
  pre-commit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.bun/install/global
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
            ${{ runner.os }}-bun-

      - run: bun install --frozen-lockfile

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
            ${{ runner.os }}-pre-commit-

      - name: Run pre-commit
        id: pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files

      - name: Commit formatted files
        if: ${{ !cancelled() }}
        uses: suzuki-shunsuke/commit-action@v0.0.7
        with:
          commit_message: 'style: auto-format'
          workflow: deny
          github_token: ${{ steps.app-token.outputs.token }}

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.bun/install/global
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
            ${{ runner.os }}-bun-

      - run: bun install --frozen-lockfile

      - name: Run Lint
        run: bun run lint

      - name: Run Tests
        run: bun run test

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: ${{ github.ref == 'refs/heads/master' && 'Production' || 'Preview' }}
          environment-url: ${{ github.ref == 'refs/heads/master' && 'https://tasker.workers.dev' || null }}
          description: Deploy to Cloudflare Workers
          initial-status: in_progress
          production-environment: ${{ github.ref == 'refs/heads/master' }}
          log-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.bun/install/global
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .open-next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('bun.lock') }}-${{ hashFiles('src/**', 'app/**', 'next.config.ts', '!node_modules/**/*') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('bun.lock') }}-
            ${{ runner.os }}-nextjs-

      - name: Build application
        run: bun run build

      - name: Build for Cloudflare
        run: bun run opennextjs-cloudflare build

      - name: Deploy to Cloudflare Workers
        id: cloudflare-deployment
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy ${{ github.ref == 'refs/heads/master' && '--env production' || '' }} --var NEXT_PUBLIC_VERSION_ID:${{ github.sha }}
        env:
          CLOUDFLARE_DATABASE_ID: ${{ secrets.CLOUDFLARE_DATABASE_ID }}

      - name: Extract deployment URL
        if: github.ref != 'refs/heads/master'
        id: extract-url
        run: |
          cat << 'EOF' > deployment-output.txt
          ${{ steps.cloudflare-deployment.outputs.command-output }}
          EOF

          # Extract version ID from output
          VERSION_ID=$(grep -o 'Current Version ID: [a-f0-9-]*' deployment-output.txt | sed 's/Current Version ID: //')

          if [ -n "$VERSION_ID" ]; then
            # Construct preview URL from version ID
            # Format: https://<8-char-prefix>-<worker-name>.<subdomain>.workers.dev
            VERSION_PREFIX=$(echo "$VERSION_ID" | cut -c1-8)
            PREVIEW_URL="https://${VERSION_PREFIX}-tasker.fohte.workers.dev"
          else
            # Fallback to extracting any URL from output
            PREVIEW_URL=$(grep -o 'https://[^[:space:]]*\.workers\.dev' deployment-output.txt | head -1)
          fi

          echo "deployment-url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: ${{ job.status }}
          environment-url: ${{ steps.extract-url.outputs.deployment-url || (github.ref == 'refs/heads/master' && 'https://tasker.workers.dev' || '') }}
          log-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate migrations
        run: bun run db:generate

      - name: Apply migrations to production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply tasker --remote
        env:
          CLOUDFLARE_DATABASE_ID: ${{ secrets.CLOUDFLARE_DATABASE_ID }}
