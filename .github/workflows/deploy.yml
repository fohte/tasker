name: Deploy to Cloudflare Workers

on:
  push:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: ${{ github.ref == 'refs/heads/master' && 'Production' || 'Preview' }}
          environment-url: ${{ github.ref == 'refs/heads/master' && 'https://tasker.workers.dev' || null }}
          description: Deploy to Cloudflare Workers
          initial-status: in_progress
          production-environment: ${{ github.ref == 'refs/heads/master' }}
          log-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.bun/install/global
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .open-next
          key: ${{ runner.os }}-nextjs-${{ hashFiles('bun.lock') }}-${{ hashFiles('src/**', 'app/**', 'next.config.ts', '!node_modules/**/*') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('bun.lock') }}-
            ${{ runner.os }}-nextjs-

      - name: Run tests
        run: bun test

      - name: Run linter
        run: bun run lint

      - name: Build application
        run: bun run build

      - name: Build for Cloudflare
        run: bun run opennextjs-cloudflare build

      - name: Deploy to Cloudflare Workers
        id: cloudflare-deployment
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env ${{ github.ref == 'refs/heads/master' && 'production' || 'preview' }}
        env:
          CLOUDFLARE_DATABASE_ID: ${{ secrets.CLOUDFLARE_DATABASE_ID }}

      - name: Extract deployment URL
        if: github.ref != 'refs/heads/master'
        id: extract-url
        run: |
          echo "${{ steps.cloudflare-deployment.outputs.command-output }}" > deployment-output.txt
          # Extract the deployment URL from wrangler output
          DEPLOYMENT_URL=$(grep -o 'https://[^[:space:]]*\.workers\.dev' deployment-output.txt | head -1)
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Update deployment status
        if: always()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: ${{ job.status }}
          environment-url: ${{ steps.extract-url.outputs.deployment-url || (github.ref == 'refs/heads/master' && 'https://tasker-production.workers.dev' || '') }}
          log-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = "${{ steps.extract-url.outputs.deployment-url }}";
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview deployment')
            );

            const body = `### ðŸš€ Preview deployment ready!

            **URL**: ${deploymentUrl}
            **Commit**: \`${context.sha.substring(0, 7)}\``;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate migrations
        run: bun run db:generate

      - name: Apply migrations to production
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply tasker --remote
        env:
          CLOUDFLARE_DATABASE_ID: ${{ secrets.CLOUDFLARE_DATABASE_ID }}
